name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run with debug logging'
        required: false
        default: false
        type: boolean
      build_type:
        description: 'Build type'
        required: false
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86, x64]
        include:
          - arch: x86
            generator: "Visual Studio 17 2022"
            arch-flag: "-A Win32"
          - arch: x64
            generator: "Visual Studio 17 2022"
            arch-flag: "-A x64"
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Configure CMake
      run: cmake -B build -G "${{ matrix.generator }}" ${{ matrix.arch-flag }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} -DBUILD_BENCHMARKS=OFF
    - name: Build
      run: cmake --build build --config ${{ inputs.build_type || 'Release' }}
    - name: Test
      run: |
        cd build
        ctest -C ${{ inputs.build_type || 'Release' }} --output-on-failure

  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-dev libpcre3-dev
    - name: Configure CMake
      env:
        CC: gcc
        CXX: g++
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} -DBUILD_BENCHMARKS=OFF
    - name: Build
      run: cmake --build build
    - name: Test
      run: |
        cd build
        ctest --output-on-failure

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up ARM64 environment
      run: |
        sudo dpkg --add-architecture arm64
        sudo sed -i 's/http:\/\/security.ubuntu.com/http:\/\/ports.ubuntu.com/g' /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          llvm-dev:arm64 \
          libpcre3-dev:arm64
    - name: Configure CMake
      env:
        CC: aarch64-linux-gnu-gcc
        CXX: aarch64-linux-gnu-g++
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} -DBUILD_BENCHMARKS=OFF -DCMAKE_CXX_FLAGS="-Wno-psabi"
    - name: Build
      run: cmake --build build

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
          -DBUILD_BENCHMARKS=OFF
    - name: Build
      run: cmake --build build
    - name: Test
      if: matrix.arch == 'x86_64'  # Only run tests on native architecture
      run: |
        cd build
        ctest --output-on-failure

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v12
      with:
        version: latest
    - name: Configure CMake
      run: |
        mkdir build-wasm
        cd build-wasm
        emcmake cmake .. \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type || 'Release' }} \
          -DBUILD_TESTING=OFF \
          -DCMAKE_EXECUTABLE_SUFFIX=".js"
    - name: Build WASM
      run: |
        cd build-wasm
        emmake make
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: flowgraph-wasm
        path: |
          build-wasm/*.wasm
          build-wasm/*.js
          build-wasm/*.html
